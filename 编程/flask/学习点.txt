随着项目越来越大，更好的处理方式是将单一的模块升级为包（Package），把不同部分的代码分模块存放。在Python中，每一个有效的Python文件（.py）都是模块。每一个包含__init__.py文件的文件夹都被视作包，包让你可以使用文件夹来组织模块。__init__.py文件通常被称作构造文件，文件可以为空，也可以用来放置包的初始化代码。当包或包内的模块被导入时，构造文件将被自动执行。

程序的核心组件都放到一个包中，这个包称为程序包，包的名称通常使用程序名称，即sayhello，有时为了方便管理也会使用app作为包名称。除了程序代码，一个基本的Flask项目还包括其他必要的组件


在创建程序实例后，使用config对象的from_pyfile()方法即可加载配置，传入配置模块的文件名作为参数：      
app = Flask(__name__)         
app.config.from_pyfile('settings.py')


__init__.py文件通常被称作构造文件，文件可以为空，也可以用来放置包的初始化代码。
当我们启动程序时，首先被执行的是包含程序实例的脚本，即构造文件。__init__.py
但注册在程序实例上的各种处理程序均存放在其他脚本中，比如视图函数存放在views.py中、错误处理函数则存放在errors.py中。需要在构造文件中导入这些模块。因为这些模块也需要从构造文件中导入程序实例，所以为了避免循环依赖，这些导入语句在构造文件的末尾定义。


1）分析需求，列出功能清单或写需求说明书。
2）设计程序功能，写功能规格书和技术规格书。
3）进入开发与测试的迭代。
4）调试和性能等专项测试。
5）部署上线（deployment）。
6）运行维护与营销等。


为了方便在开发时重新创建数据库表，我们还添加了一个初始化数据库的initdb命令，和第5章介绍过的initdb()命令函数完全相同。

定义模型：
class Note(db.Model)：
    id=db.Column(db.Integer,primary_key=True)
    body=db.Column(db.Text)

在head标签和body标签内，我们引入了Bootstrap所需的CSS和Java Script文件，以及Bootstrap所依赖的j Query和Popper.js。

