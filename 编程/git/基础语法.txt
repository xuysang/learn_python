git config --global user.name "Your Name"
git config --global user.email "email@example.com"

git add readme.txt
git diff readme.txt
git commit -m "add distributed"

为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件。

git reset --hard 1094a 指定回到某个版本
git reset --hard HEAD^ 提交版本回退前一个版本（上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。）

git reset HEAD readme.txt  撤回从暂存区到工作区

git checkout -- readme.txt  丢弃工作区的修改


要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

git checkout -b dev  ###git checkout命令加上-b参数表示创建并切换相当于$git branch dev $ git checkout dev

查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>


1. git init //初始化仓库
2. git add .(文件name) //添加文件到本地仓库
3. git commit -m "first commit" //添加文件描述信息
4. git remote add origin + 远程仓库地址 //链接远程仓库，创建主分支
5. git pull origin master // 把本地仓库的变化连接到远程仓库主分支
6. git push -u origin master //把本地仓库的文件推送到远程仓库